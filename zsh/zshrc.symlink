# Autoload all user shell functions, following symlinks
# ------------------------------------------------------------------------
if [[ -d $DOTFILES/zsh/functions ]]; then
    for func in $DOTFILES/zsh/functions/*(:t); autoload -U $func
fi

#prepend_path $HOME/Library/Python/3.9/bin
#prepend_path /usr/local/opt/python@3.8/bin
#prepend_path /usr/local/opt/python/libexec/bin
prepend_path $DOTFILES/bin
prepend_path $DOTFILES/bin/server
prepend_path $HOME/.local/bin
#prepend_path $HOME/.local/bin

if [[ "$(uname)" == "Linux" ]]; then
    export HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew";
    export HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar";
    export HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX/Homebrew";
    prepend_path "$HOMEBREW_PREFIX/bin"
    prepend_path "$HOMEBREW_PREFIX/sbin"
    export MANPATH="$HOMEBREW_PREFIX/share/man${MANPATH+:$MANPATH}:";
    export INFOPATH="$HOMEBREW_PREFIX/share/info:${INFOPATH}";
fi

if [[ "$(uname)" == "Darwin" ]]; then
    export ICLOUD="$HOME/Library/Mobile Documents/com~apple~CloudDocs"
    export GIT="$HOME/Library/Mobile Documents/com~apple~CloudDocs/PhD/Git_Repos"
    export OBSIDIAN="$HOME/Library/Mobile Documents/iCloud~md~obsidian/Documents"
fi

export TERMINAL='kitty'
export EDITOR='lvim'
export NVIM_LISTEN_ADDRESS=/tmp/nvimsocket


# Terminal colors
# ------------------------------------------------------------------------
OLOR_BLACK="\e[0;30m"
COLOR_BLUE="\e[0;34m"
COLOR_GREEN="\e[0;32m"
COLOR_CYAN="\e[0;36m"
COLOR_PINK="\e[0;35m"
COLOR_RED="\e[0;31m"
COLOR_PURPLE="\e[0;35m"
COLOR_BROWN="\e[0;33m"
COLOR_LIGHTGRAY="\e[0;37m"
COLOR_DARKGRAY="\e[1;30m"
COLOR_LIGHTBLUE="\e[1;34m"
COLOR_LIGHTGREEN="\e[1;32m"
COLOR_LIGHTCYAN="\e[1;36m"
COLOR_LIGHTRED="\e[1;31m"
COLOR_LIGHTPURPLE="\e[1;35m"
COLOR_YELLOW="\e[1;33m"
COLOR_WHITE="\e[1;37m"
COLOR_NONE="\e[0m"

if [ -z "$TMUX" ]; then
    #export TERM=xterm-256color-italic
    export TERM=xterm-kitty
else
    export TERM=tmux-256color
fi

# add color to man pages
export MANROFFOPT='-c'
export LESS_TERMCAP_mb=$(tput bold; tput setaf 2)
export LESS_TERMCAP_md=$(tput bold; tput setaf 6)
export LESS_TERMCAP_me=$(tput sgr0)
export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4)
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7)
export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)

# History
# ------------------------------------------------------------------------
HISTFILE="$HOME/.zsh_history"  # The path to the history file
HISTSIZE=10000                # The maximum number of events to save in the internal history
SAVEHIST=10000                # The maximum number of events to save in the history file

# Shell options
setopt SHARE_HISTORY          # Share history between all sessions
setopt HIST_IGNORE_ALL_DUPS   # Delete an old recorded event if a new event is a duplicate

unsetopt BEEP

# initialize auto/tab complete
autoload -U compinit
compinit

zstyle ':completion:*' menu select
zmodload zsh/complist
_comp_options+=(globdots)		# Include hidden files.

# Completion for kitty
if [[ -x "(command -v kitty)" ]]; then
    kitty + complete setup zsh | source /dev/stdin
fi

# source all .zsh files inside of the zsh/ directory
source "$DOTFILES/zsh/utils.zsh"
source "$DOTFILES/zsh/prompt.zsh"

# Key bindings
# ------------------------------------------------------------------------

# VI mode
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
#bindkey -v '^?' backward-delete-char

# Plugins 
# ------------------------------------------------------------------------
export ZPLUGDIR="$CACHEDIR/zsh/plugins"
if [[ ! -d "$ZPLUGDIR" ]]; then
    mkdir -p "$ZPLUGDIR"
fi
# array containing plugin information (managed by zfetch)
typeset -A plugins

zfetch $ZPLUGDIR zsh-users/zsh-syntax-highlighting
zfetch $ZPLUGDIR zsh-users/zsh-autosuggestions
zfetch $ZPLUGDIR chriskempson/base16-shell

# Setup
# ------------------------------------------------------------------------

# fzf setup
[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git}" 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# conda
if [[ "$(uname)" = "Darwin" ]]; then
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/usr/local/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
            . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
        else
            export PATH="/usr/local/Caskroom/miniconda/base/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
fi

if [[ "$(uname)" = "Linux" ]]; then
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/home/srbongers/.miniconda/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/home/srbongers/.miniconda/etc/profile.d/conda.sh" ]; then
            . "/home/srbongers/.miniconda/etc/profile.d/conda.sh"
        else
            export PATH="/home/srbongers/.miniconda/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
fi

## conda automatic environment activation
if [[ "$(uname)" = "Darwin" ]]; then
    if [ -f "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
        CONDA_CHANGEPS1=false conda activate datascience-py3p8-r3p6p0-env
    fi
fi

## pipenv setup
## creates .venv in your project directory
#export PIPENV_VENV_IN_PROJECT="enabled"
## enable pipenv tab completion
#eval "$(pipenv --completion)"

# hook direnv into zsh
eval "$(direnv hook zsh)"

# hook rbenv into zsh
eval "$(rbenv init -)"

# hook docker into zsh
#eval "$(docker-machine env default)"

# Add bundler and jekyll to path (prepend_path should be placed below the hook)
# prepend_path $HOME/.gem/ruby/2.6.0/bin

# Aliases
# ------------------------------------------------------------------------

# reload zsh config
alias reload!='RELOAD=1 source $HOME/.zshrc'

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # macOS `ls`
    colorflag="-G"
fi

# Filesystem aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....="cd ../../.."
alias .....="cd ../../../.."

# More ls aliases.
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

if command -v exa >/dev/null 2>&1; then
	alias ls="exa --git --color=automatic"
	alias ll="exa --all --long --git --color=automatic"
	alias la="exa --all --binary --group --header --long --git --color=automatic"
	alias l="exa --git --color=automatic"
fi
alias rmf="rm -rf"

# Lists the ten most used commands
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"

# Helpers
alias grep='grep --color=auto'
alias df='df -h' # disk free, in Gigabytes, not bytes
alias du='du -h -c' # calculate disk usage for a folder
alias cwd='printf "%q\n" "$(pwd)" | tee >(pbcopy)' #  like pwd, print out the escaped path and copy it to the clipboard


# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# Recursively delete `.DS_Store` files
alias cleanup="find . -name '*.DS_Store' -type f -ls -delete"

# git aliases
alias gits='git su'
alias gitl="git l"

# tmux aliases
alias ta='tmux attach'
alias tls='tmux ls'
alias tat='tmux attach -t'
alias tns='tmux new-session -s'

# set neovim as default vim
alias vim='lvim'
alias vimr='nvr -s -p'

# Forwards my custom TERM via ssh
alias ssh='TERM=xterm ssh'

# Pdflatex
alias pdflatex='pdflatex --output-directory=build'

# Skim alias
alias skim='open -a skim'

# Display images in kitty
alias icat="kitty +kitten icat"
